"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YoutubeSubs = void 0;
const axios_1 = __importDefault(require("axios"));
const transcriber_1 = require("./transcriber");
const track_1 = require("./track");
const chapter_1 = require("./chapter");
const defaultOptions = {
    lang: 'en',
};
class YoutubeSubs {
    /**
     * Get captions from a YouTube video.
     * @param videoId string
     * @param options Options
     * @returns Transcription[]
     */
    static getSubs(videoId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.options = Object.assign(Object.assign({}, this.options), options);
            const { data } = yield axios_1.default.get(`https://youtube.com/watch?v=${videoId}`);
            if (!data.includes('captionTracks'))
                throw new Error(`Could not find captions.`);
            const track = new track_1.Track(data);
            const captionTrack = track.getCaptionByLanguage(this.options.lang);
            if (!captionTrack || (captionTrack && !captionTrack.baseUrl))
                throw new Error(`Could not find ${this.options.lang} captions.`);
            const { data: transcript } = yield axios_1.default.get(captionTrack.baseUrl);
            const transcriber = new transcriber_1.Transcriber(transcript);
            return transcriber.getTranscriptions();
        });
    }
    /**
     * Get all chapters and its captions from a YouTube video.
     * @param videoId string
     * @param options Options
     * @returns ChapterTranscriptions[]
     */
    static getSubsByChapter(videoId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.options = Object.assign(Object.assign({}, this.options), options);
            const { data } = yield axios_1.default.get(`https://youtube.com/watch?v=${videoId}`);
            if (!data.includes('captionTracks'))
                throw new Error(`Could not find captions.`);
            const track = new track_1.Track(data);
            const captionTrack = track.getCaptionByLanguage(this.options.lang);
            if (!captionTrack || (captionTrack && !captionTrack.baseUrl))
                throw new Error(`Could not find ${this.options.lang} captions.`);
            const { data: transcript } = yield axios_1.default.get(captionTrack.baseUrl);
            const transcriber = new transcriber_1.Transcriber(transcript);
            const transcriptions = transcriber.getTranscriptions();
            const chapterScraper = new chapter_1.ChapterScraper(data);
            const chapters = chapterScraper.getChapters();
            const chapterTranscriptions = chapters.map((chapter) => {
                // filter transcriptions that are within the chapter
                const chapterTranscriptions = transcriptions.filter(transcription => {
                    const captionEnd = transcription.start + transcription.dur;
                    return ((Number(transcription.start) >= chapter.start || captionEnd >= chapter.start) &&
                        (!chapter.end || transcription.start < chapter.end));
                });
                return {
                    title: chapter.title,
                    from: chapter.start,
                    to: chapter.end,
                    captions: chapterTranscriptions
                };
            });
            return chapterTranscriptions;
        });
    }
    /**
     * Get captions from a YouTube video by time.
     * @param videoId string
     * @param from number | null
     * @param to number | null
     * @param options Options
     * @returns
     */
    static getSubsByTime(videoId, from, to, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.options = Object.assign(Object.assign({}, this.options), options);
            const { data } = yield axios_1.default.get(`https://youtube.com/watch?v=${videoId}`);
            if (!data.includes('captionTracks'))
                throw new Error(`Could not find captions.`);
            const track = new track_1.Track(data);
            const captionTrack = track.getCaptionByLanguage(this.options.lang);
            if (!captionTrack || (captionTrack && !captionTrack.baseUrl))
                throw new Error(`Could not find ${this.options.lang} captions.`);
            const { data: transcript } = yield axios_1.default.get(captionTrack.baseUrl);
            const transcriber = new transcriber_1.Transcriber(transcript);
            const transcriptions = transcriber.getTranscriptions();
            return transcriptions.filter(transcription => {
                const captionEnd = transcription.start + transcription.dur;
                return ((!from || (Number(transcription.start) >= from || captionEnd >= from)) &&
                    (!to || transcription.start < to));
            });
        });
    }
}
YoutubeSubs.options = defaultOptions;
exports.YoutubeSubs = YoutubeSubs;
//# sourceMappingURL=main.js.map