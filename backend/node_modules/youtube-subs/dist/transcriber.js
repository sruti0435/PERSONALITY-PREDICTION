"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transcriber = void 0;
const html_entities_1 = require("html-entities");
const striptags_1 = __importDefault(require("striptags"));
class Transcriber {
    constructor(transcript) {
        this.transcriptions = [];
        this.transcript = transcript;
        this.transcribe();
    }
    transcribe() {
        this.transcriptions = this.transcript
            .replace('<?xml version="1.0" encoding="utf-8" ?><transcript>', '')
            .replace('</transcript>', '')
            .split('</text>')
            .filter(line => line && line.trim())
            .map(line => {
            const startRegex = /start="([\d.]+)"/;
            const durRegex = /dur="([\d.]+)"/;
            const start = startRegex.exec(line);
            const dur = durRegex.exec(line);
            const htmlText = line
                .replace(/<text.+>/, '')
                .replace(/&amp;/gi, '&')
                .replace(/<\/?[^>]+(>|$)/g, '');
            const decodedText = (0, html_entities_1.decode)(htmlText);
            const text = (0, striptags_1.default)(decodedText);
            return {
                start: Number(start === null || start === void 0 ? void 0 : start[1]),
                dur: Number(dur === null || dur === void 0 ? void 0 : dur[1]),
                text,
            };
        });
    }
    getTranscriptions() {
        return this.transcriptions;
    }
}
exports.Transcriber = Transcriber;
//# sourceMappingURL=transcriber.js.map